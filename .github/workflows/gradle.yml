name: Gradle CI/CD - Second Project

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    name: Build JAR for Second Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Grant execute permissions to gradlew
        run: chmod +x ./gradlew
      
      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('/*.gradle*', '/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Build JAR
        run: ./gradlew build -x test
        env:
          GRADLE_USER_HOME: ${{ github.workspace }}/.gradle
      
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: second-project-jar
          path: build/libs/*.jar

  deploy:
    name: Deploy Second Project to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: second-project-jar
          path: ./build/libs
      
      - name: List files after download
        run: ls -la ./build/libs/
      
      - name: Deploy and Verify Application
        env:
          SERVER_HOST: 62.171.147.215
          SERVER_USER: root
          SERVER_PASSWORD: Mekenim01
        run: |
          # Install sshpass
          sudo apt-get update && sudo apt-get install -y sshpass
          
          # Create directories for second project
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "
            mkdir -p /opt/trpo-second/backup
            mkdir -p /opt/trpo-second/new
          "
          
          # Backup current version if it exists
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "
            if [ -f /opt/trpo-second/second-project-0.0.1-SNAPSHOT.jar ]; then
              cp /opt/trpo-second/second-project-0.0.1-SNAPSHOT.jar /opt/trpo-second/backup/
              echo 'Current version backed up successfully'
            fi
          "
          
          # Upload new version
          sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no ./build/libs/second-project-0.0.1-SNAPSHOT.jar $SERVER_USER@$SERVER_HOST:/opt/trpo-second/new/
          
          # Deployment and verification
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "
            # Set permissions for new version
            chmod 755 /opt/trpo-second/new/second-project-0.0.1-SNAPSHOT.jar
            
            # Stop the second service
            sudo systemctl stop test-second.service
            
            # Move new version into place
            mv /opt/trpo-second/new/second-project-0.0.1-SNAPSHOT.jar /opt/trpo-second/
            
            # Start the second service
            sudo systemctl start test-second.service
            
            # Wait for application to start
            echo 'Waiting for application to start...'
            sleep 200
            
            # Verification checks
            DEPLOYMENT_SUCCESS=true
            
            # Check if service is running
            if ! systemctl is-active --quiet test-second.service; then
              echo 'Service failed to start'
